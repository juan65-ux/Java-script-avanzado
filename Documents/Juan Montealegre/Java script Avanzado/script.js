/*FUNCIONES:Crea bloques de c√≥digo reutilizables
 y define par√°metros para cambiar su comportamiento.
 Crea bloques de c√≥digo reutilizables y define par√°metros
para cambiar su comportamiento. */

/*forma m√°s com√∫n y b√°sica es mediante la palabra clave function.
 Esta es tu primera funci√≥n:*/

function saludar() {
  console.log('Hola Miguel')
}
/*declarar una funci√≥n consiste de:

La palabra reservada _function_ que 
indica que estamos definiendo una funci√≥n.
El nombre de la funci√≥n, en este caso 
saludar. Normalmente usamos verbos 
para nombrar funciones, ya que son acciones que realizan.
Un par de par√©ntesis _()_ despu√©s del 
nombre. Pueden contener par√°metros.
 En este caso, no tenemos ninguno.
Un bloque de c√≥digo entre llaves _{}_.
 En este caso, solo tenemos una l√≠nea de c√≥digo,
  pero podr√≠amos tener muchas m√°s.*/ 



  /*Las funciones pueden devolver un resultado.
   Para ello, utilizamos la palabra reservada return
y despu√©s el valor que queremos devolver:*/ 
function sumar() {
    return 1 + 1
  }

  /*Ahora, cada vez que llamemos a la funci√≥n sumar,
   nos devolver√° el resultado de la suma:*/
  
   // podemos guardar el resultado en una variable
const resultado = sumar()

// o ver en consola directamente el resultado
console.log(sumar()) // -> 2


/* Math, un objeto incorporado en JavaScript
 que tiene propiedades y m√©todos para constantes
  y funciones matem√°ticas. Vamos a ver dos m√©todos
   que nos van a ser muy √∫tiles:

_Math.random()_: devuelve un n√∫mero aleatorio
entre 0 y 1, con decimales.
_Math.floor()_: redondea un n√∫mero hacia abajo.
_Math.random_ es parecido a console.log,
en el sentido que son m√©todos que JavaScript
incorpora de serie y que podemos utilizar 
en cualquier punto de nuestro programa.
*/

/*funci√≥n que nos devuelva un n√∫mero aleatorio del 1 al 10:*/

function getRandomNumber() {
    // recuperamos un n√∫mero aleatorio entre 0 y 1
    const random = Math.random() // por ejemplo: 0.6803487380457318
  
    // lo multiplicamos por 10 para que est√© entre 0 y 10
    const multiplied = random * 10 // -> 6.803487380457318
  
    // redondeamos hacia abajo para que est√© entre 0 y 9
    const rounded = Math.floor(multiplied) // -> 6
  
    // le sumamos uno para que est√© entre 1 y 10
    const result = rounded + 1 // -> 7
  
    // devolvemos el resultado
    return result
  }

  /*Parametros en funciones*/

  /*par√°metros. Esto es, que su comportamiento pueda cambiar seg√∫n los datos que le pasemos.

Imagina que queremos que nuestra funci√≥n de saludar,
 pueda saludar a cualquier persona, no solo a Miguel.
  Para ello, podemos hacer que la funci√≥n acepte un par√°metro, 
que ser√° el nombre de la persona a la que queremos saludar.*/

function saludar(nombre) {
    console.log("Hola " + nombre)
  }

  /*Ahora, cada vez que llamemos a la funci√≥n,
   podemos pasarle una cadena de texto:*/

saludar('Miguel') // -> Hola Miguel
saludar('Itziar') // -> Hola Itziar
saludar('Carmen') // -> Hola Carmen

/*para crear una calculadora,
 deber√≠amos empezar a crear funciones
  que realicen las operaciones b√°sicas.
En este caso necesitaremos parametrizar 
la funci√≥n para que acepte los dos n√∫meros
 para hacer la operaci√≥n.*/

 function sumar(a, b) {
    return a + b
  }
  
  function restar(a, b) {
    return a - b
  }

  /*Y ya podr√≠amos usarlas:*/
  const resultadoSuma = sumar(2, 3)
console.log(resultadoSuma) // -> 5

const resultadoResta = restar(5, 2)
console.log(resultadoResta) // -> 3

/*Par√°metros y argumentos
En el ejemplo anterior, 
hemos visto que podemos
 pasarle valores a la funci√≥n
  cuando la llamamos. 
  A estos valores se les llama argumentos.
  Y a los valores que recibe la funci√≥n,
   se les llama par√°metros.*/

   // la funci√≥n suma tiene dos par√°metros: a y b
function sumar(a, b) {
    return a + b
  }
  
  // cuando llamamos a la funci√≥n, le pasamos dos argumentos: 2 y 3
    sumar(2, 3) // -> 5 

    /*El orden de los par√°metros importa
Algo muy importante, y un error muy com√∫n 
al empezar a crear funciones, es olvidar
 que el orden de los par√°metros importa.

Vamos a crear una funci√≥n que simule un microondas.
 Le pasaremos el plato, tiempo y potencia.
  Y nos devolver√° el resultado del plato cocinado.*/

  function cocinarMicroondas(plato, tiempo, potencia) {
    if (plato === 'üê•' && tiempo === 1 && potencia === 5) {
      return 'üçó'
    }
  
    if (plato === 'ü•ö' && tiempo === 2 && potencia === 3) {
      return 'üç≥'
    }
  
    return '‚ùå Plato no soportado'
  }



  /*¬øQu√© es una function expression?
Una function expression es una funci√≥n
 que se asigna a una variable. Por ejemplo:*/

 // esto es una function expression
const sum = function (a, b) {
    return a + b
  }
  
  // esto es una declaraci√≥n de funci√≥n
  function sum(a, b) {
    return a + b
  }


  /*podemos llamar a la funci√≥n usando el nombre de la variable:*/

sum(1, 2) // 3

/*El comportamiento es 
muy similar al de una funci√≥n 
declarada con la palabra clave function.
 Sin embargo, hay una diferencia muy importante
  entre ambas que debes conocer: el hoisting.

Hoisting
El hoisting es un t√©rmino que se usa
 para describir c√≥mo JavaScript parece
  que mueve las declaraciones funciones 
  al principio del c√≥digo, de forma que 
  las puedes usar incluso antes de declararlas.
   Por ejemplo:*/
   
   sum(1, 2) // 3

function sum(a, b) {
  return a + b
}

/*Lo que est√° pasando 
es que JavaScript asigna
 en memoria durante la 
 fase de compilaci√≥n las
  declaraciones de funciones
   y por eso al ejecutarse el
    c√≥digo tiene acceso a esa
     posici√≥n de memoria a la
      que se refiere la funci√≥n.

Eso ser√≠a la explicaci√≥n t√©cnica
 del hoisting, pero si te sirve de ayuda,
  puedes pensar que es como si JavaScript 
  moviese las declaraciones de funciones
   al principio del c√≥digo.*/

/*ARROW FUNCTION*/
/*Las funciones flecha son una forma
m√°s concisa de crear funciones en JavaScript,
y se han vuelto muy populares en los √∫ltimos a√±os
debido a su sintaxis simplificada.*/
/*La sintaxis b√°sica de una funci√≥n flecha es la siguiente:*/

const miFuncionFlecha = () => {
  // c√≥digo a ejecutar
}

/*son siempre funciones an√≥nimas
y function expressions. Esto significa
que no tienen nombre y que se asignan a una variable.*/

/*En lugar de la palabra clave function, 
utilizamos una flecha => para definir la funci√≥n. 
Tambi√©n podemos omitir los par√©ntesis alrededor de los 
par√°metros si solo tenemos uno:*/
const saludar = nombre => {
  console.log("Hola " + nombre)
}
/*Ventajas de las funciones flecha*/

/*Sintaxis m√°s concisa: la sintaxis de las
funciones flecha es m√°s corta y m√°s f√°cil de 
leer que la sintaxis de las funciones regulares,
especialmente cuando se trabaja con funciones de una sola l√≠nea.

Return impl√≠cito: las funciones
flecha puede devolver el valor de la
expresi√≥n sin usar la palabra clave return
cuando son de una sola l√≠nea. Esto hace que 
las funciones flecha sean a√∫n m√°s cortas y m√°s f√°ciles de leer.

Funciones an√≥nimas m√°s legibles: las funciones 
flecha son una forma m√°s legible y concisa de
crear funciones an√≥nimas en JavaScript, lo cual
puede hacer que nuestro c√≥digo sea m√°s f√°cil de entender.*/

/*Return impl√≠cito*/
/*Cuando una funci√≥n flecha 
tiene una sola expresi√≥n, podemos omitir
las llaves {} y la palabra clave return para
hacerla a√∫n m√°s corta. Esto se conoce como return impl√≠cito.*/
// Declaraci√≥n de funci√≥n regular
function sumar(a, b) {
  return a + b
}

// Funci√≥n flecha
const sumarFlecha = (a, b) => {
  return a + b
}

// Funci√≥n flecha con return impl√≠cito
const sumarFlecha = (a, b) => a + b
/*En conclusion   la funci√≥n 
flecha con return impl√≠cito 
es mucho m√°s corta y f√°cil de leer 
que la funci√≥n regular. Esto es especialmente
√∫til cuando estamos trabajando con funciones de una sola l√≠nea.*/

/*RECURSIVIDAD*/
/*La recursividad es una t√©cnica
de programaci√≥n que consiste en
que una funci√≥n se llame a s√≠ misma.*/

/*Ejemplo de recursividad
Vamos a crear una funci√≥n que cuente desde un n√∫mero hasta cero.*/
function cuentaAtras(numero) {
  // Condici√≥n base: Si el n√∫mero que recibe es
  // menor de 0 entonces salimos de la funci√≥n
  if (numero < 0) { return }

  // Si el n√∫mero era mayor o igual a 0, lo mostramos
  console.log(numero)

  // Y llamamos a la funci√≥n con el n√∫mero anterior
  cuentaAtras(numero - 1)
}
/*Si llamamos a la funci√≥n con el n√∫mero 3, el resultado ser√°:*/
cuentaAtras(3)
// -> 3
// -> 2
// -> 1
// -> 0

/*La ejecuci√≥n la ver√≠amos as√≠:*/
cuentaAtras(3) -> (muestra 3)
               \ 
          cuentaAtras(2) -> (muestra 2)
                       \
                  cuentaAtras(1) -> (muestra 1)
                               \
                          cuentaAtras(0) -> (muestra 0)
                                        \
                                   cuentaAtras(-1) -> salida
/*¬°Cuidado! Si no ponemos la
condici√≥n base, la funci√≥n se llamar√°
infinitamente y el navegador se quedar√° bloqueado.
Cuando hacemos recursividad SIEMPRE hay que tener
una condici√≥n que haga que la funci√≥n salga de s√≠ misma.*/
/*Usando recursividad y devolviendo un valor*/
/*La recursividad se usa muchas veces para solucionar algoritmos. Por ejemplo, vamos a crear una funci√≥n que calcule el factorial de un n√∫mero.

El factorial de un n√∫mero es el 
resultado de multiplicar ese n√∫mero 
por todos los anteriores hasta llegar a 1.
Por ejemplo, el factorial de 5 es 5 * 4 * 3 * 2 * 1 = 120*/
function factorial(n) {
  // Condici√≥n base: Si el n√∫mero es 0 o 1, devolvemos 1
  // y no llamamos a la funci√≥n de nuevo
  if (n === 0 || n === 1) {
    return 1
  } else {
    // Si el n√∫mero es mayor que 1, llamamos a la funci√≥n
    return n * factorial(n - 1)
  }
}

console.log(factorial(5)) // Resultado: 120
console.log(factorial(3)) // Resultado: 6
_________
factorial(3) --------------------------> 6
        \ 
  3 * factorial(2) ---------------> 6
          \
    2 * factorial(1) -----------> 2
            \
      1 * factorial(0) -------> 1
