/*FUNCIONES:Crea bloques de c√≥digo reutilizables
 y define par√°metros para cambiar su comportamiento.
 Crea bloques de c√≥digo reutilizables y define par√°metros
para cambiar su comportamiento. */

/*forma m√°s com√∫n y b√°sica es mediante la palabra clave function.
 Esta es tu primera funci√≥n:*/

function saludar() {
  console.log('Hola Miguel')
}
/*declarar una funci√≥n consiste de:

La palabra reservada _function_ que 
indica que estamos definiendo una funci√≥n.
El nombre de la funci√≥n, en este caso 
saludar. Normalmente usamos verbos 
para nombrar funciones, ya que son acciones que realizan.
Un par de par√©ntesis _()_ despu√©s del 
nombre. Pueden contener par√°metros.
 En este caso, no tenemos ninguno.
Un bloque de c√≥digo entre llaves _{}_.
 En este caso, solo tenemos una l√≠nea de c√≥digo,
  pero podr√≠amos tener muchas m√°s.*/ 



  /*Las funciones pueden devolver un resultado.
   Para ello, utilizamos la palabra reservada return
y despu√©s el valor que queremos devolver:*/ 
function sumar() {
    return 1 + 1
  }

  /*Ahora, cada vez que llamemos a la funci√≥n sumar,
   nos devolver√° el resultado de la suma:*/
  
   // podemos guardar el resultado en una variable
const resultado = sumar()

// o ver en consola directamente el resultado
console.log(sumar()) // -> 2


/* Math, un objeto incorporado en JavaScript
 que tiene propiedades y m√©todos para constantes
  y funciones matem√°ticas. Vamos a ver dos m√©todos
   que nos van a ser muy √∫tiles:

_Math.random()_: devuelve un n√∫mero aleatorio
entre 0 y 1, con decimales.
_Math.floor()_: redondea un n√∫mero hacia abajo.
_Math.random_ es parecido a console.log,
en el sentido que son m√©todos que JavaScript
incorpora de serie y que podemos utilizar 
en cualquier punto de nuestro programa.
*/

/*funci√≥n que nos devuelva un n√∫mero aleatorio del 1 al 10:*/

function getRandomNumber() {
    // recuperamos un n√∫mero aleatorio entre 0 y 1
    const random = Math.random() // por ejemplo: 0.6803487380457318
  
    // lo multiplicamos por 10 para que est√© entre 0 y 10
    const multiplied = random * 10 // -> 6.803487380457318
  
    // redondeamos hacia abajo para que est√© entre 0 y 9
    const rounded = Math.floor(multiplied) // -> 6
  
    // le sumamos uno para que est√© entre 1 y 10
    const result = rounded + 1 // -> 7
  
    // devolvemos el resultado
    return result
  }

  /*Parametros en funciones*/

  /*par√°metros. Esto es, que su comportamiento pueda cambiar seg√∫n los datos que le pasemos.

Imagina que queremos que nuestra funci√≥n de saludar,
 pueda saludar a cualquier persona, no solo a Miguel.
  Para ello, podemos hacer que la funci√≥n acepte un par√°metro, 
que ser√° el nombre de la persona a la que queremos saludar.*/

function saludar(nombre) {
    console.log("Hola " + nombre)
  }

  /*Ahora, cada vez que llamemos a la funci√≥n,
   podemos pasarle una cadena de texto:*/

saludar('Miguel') // -> Hola Miguel
saludar('Itziar') // -> Hola Itziar
saludar('Carmen') // -> Hola Carmen

/*para crear una calculadora,
 deber√≠amos empezar a crear funciones
  que realicen las operaciones b√°sicas.
En este caso necesitaremos parametrizar 
la funci√≥n para que acepte los dos n√∫meros
 para hacer la operaci√≥n.*/

 function sumar(a, b) {
    return a + b
  }
  
  function restar(a, b) {
    return a - b
  }

  /*Y ya podr√≠amos usarlas:*/
  const resultadoSuma = sumar(2, 3)
console.log(resultadoSuma) // -> 5

const resultadoResta = restar(5, 2)
console.log(resultadoResta) // -> 3

/*Par√°metros y argumentos
En el ejemplo anterior, 
hemos visto que podemos
 pasarle valores a la funci√≥n
  cuando la llamamos. 
  A estos valores se les llama argumentos.
  Y a los valores que recibe la funci√≥n,
   se les llama par√°metros.*/

   // la funci√≥n suma tiene dos par√°metros: a y b
function sumar(a, b) {
    return a + b
  }
  
  // cuando llamamos a la funci√≥n, le pasamos dos argumentos: 2 y 3
    sumar(2, 3) // -> 5 

    /*El orden de los par√°metros importa
Algo muy importante, y un error muy com√∫n 
al empezar a crear funciones, es olvidar
 que el orden de los par√°metros importa.

Vamos a crear una funci√≥n que simule un microondas.
 Le pasaremos el plato, tiempo y potencia.
  Y nos devolver√° el resultado del plato cocinado.*/

  function cocinarMicroondas(plato, tiempo, potencia) {
    if (plato === 'üê•' && tiempo === 1 && potencia === 5) {
      return 'üçó'
    }
  
    if (plato === 'ü•ö' && tiempo === 2 && potencia === 3) {
      return 'üç≥'
    }
  
    return '‚ùå Plato no soportado'
  }



  /*¬øQu√© es una function expression?
Una function expression es una funci√≥n
 que se asigna a una variable. Por ejemplo:*/

 // esto es una function expression
const sum = function (a, b) {
    return a + b
  }
  
  // esto es una declaraci√≥n de funci√≥n
  function sum(a, b) {
    return a + b
  }


  /*podemos llamar a la funci√≥n usando el nombre de la variable:*/

sum(1, 2) // 3

/*El comportamiento es 
muy similar al de una funci√≥n 
declarada con la palabra clave function.
 Sin embargo, hay una diferencia muy importante
  entre ambas que debes conocer: el hoisting.

Hoisting
El hoisting es un t√©rmino que se usa
 para describir c√≥mo JavaScript parece
  que mueve las declaraciones funciones 
  al principio del c√≥digo, de forma que 
  las puedes usar incluso antes de declararlas.
   Por ejemplo:*/
   
   sum(1, 2) // 3

function sum(a, b) {
  return a + b
}

/*Lo que est√° pasando 
es que JavaScript asigna
 en memoria durante la 
 fase de compilaci√≥n las
  declaraciones de funciones
   y por eso al ejecutarse el
    c√≥digo tiene acceso a esa
     posici√≥n de memoria a la
      que se refiere la funci√≥n.

Eso ser√≠a la explicaci√≥n t√©cnica
 del hoisting, pero si te sirve de ayuda,
  puedes pensar que es como si JavaScript 
  moviese las declaraciones de funciones
   al principio del c√≥digo.*/

/*ARROW FUNCTION*/
/*Las funciones flecha son una forma
m√°s concisa de crear funciones en JavaScript,
y se han vuelto muy populares en los √∫ltimos a√±os
debido a su sintaxis simplificada.*/
/*La sintaxis b√°sica de una funci√≥n flecha es la siguiente:*/

const miFuncionFlecha = () => {
  // c√≥digo a ejecutar
}

/*son siempre funciones an√≥nimas
y function expressions. Esto significa
que no tienen nombre y que se asignan a una variable.*/

/*En lugar de la palabra clave function, 
utilizamos una flecha => para definir la funci√≥n. 
Tambi√©n podemos omitir los par√©ntesis alrededor de los 
par√°metros si solo tenemos uno:*/
const saludar = nombre => {
  console.log("Hola " + nombre)
}
/*Ventajas de las funciones flecha*/

/*Sintaxis m√°s concisa: la sintaxis de las
funciones flecha es m√°s corta y m√°s f√°cil de 
leer que la sintaxis de las funciones regulares,
especialmente cuando se trabaja con funciones de una sola l√≠nea.

Return impl√≠cito: las funciones
flecha puede devolver el valor de la
expresi√≥n sin usar la palabra clave return
cuando son de una sola l√≠nea. Esto hace que 
las funciones flecha sean a√∫n m√°s cortas y m√°s f√°ciles de leer.

Funciones an√≥nimas m√°s legibles: las funciones 
flecha son una forma m√°s legible y concisa de
crear funciones an√≥nimas en JavaScript, lo cual
puede hacer que nuestro c√≥digo sea m√°s f√°cil de entender.*/

/*Return impl√≠cito*/
/*Cuando una funci√≥n flecha 
tiene una sola expresi√≥n, podemos omitir
las llaves {} y la palabra clave return para
hacerla a√∫n m√°s corta. Esto se conoce como return impl√≠cito.*/
// Declaraci√≥n de funci√≥n regular
function sumar(a, b) {
  return a + b
}

// Funci√≥n flecha
const sumarFlecha = (a, b) => {
  return a + b
}

// Funci√≥n flecha con return impl√≠cito
const sumarFlecha = (a, b) => a + b
/*En conclusion   la funci√≥n 
flecha con return impl√≠cito 
es mucho m√°s corta y f√°cil de leer 
que la funci√≥n regular. Esto es especialmente
√∫til cuando estamos trabajando con funciones de una sola l√≠nea.*/

/*RECURSIVIDAD*/
/*La recursividad es una t√©cnica
de programaci√≥n que consiste en
que una funci√≥n se llame a s√≠ misma.*/

/*Ejemplo de recursividad
Vamos a crear una funci√≥n que cuente desde un n√∫mero hasta cero.*/
function cuentaAtras(numero) {
  // Condici√≥n base: Si el n√∫mero que recibe es
  // menor de 0 entonces salimos de la funci√≥n
  if (numero < 0) { return }

  // Si el n√∫mero era mayor o igual a 0, lo mostramos
  console.log(numero)

  // Y llamamos a la funci√≥n con el n√∫mero anterior
  cuentaAtras(numero - 1)
}
/*Si llamamos a la funci√≥n con el n√∫mero 3, el resultado ser√°:*/
cuentaAtras(3)
// -> 3
// -> 2
// -> 1
// -> 0

/*La ejecuci√≥n la ver√≠amos as√≠:*/
cuentaAtras(3) -> (muestra 3)
               \ 
          cuentaAtras(2) -> (muestra 2)
                       \
                  cuentaAtras(1) -> (muestra 1)
                               \
                          cuentaAtras(0) -> (muestra 0)
                                        \
                                   cuentaAtras(-1) -> salida
/*¬°Cuidado! Si no ponemos la
condici√≥n base, la funci√≥n se llamar√°
infinitamente y el navegador se quedar√° bloqueado.
Cuando hacemos recursividad SIEMPRE hay que tener
una condici√≥n que haga que la funci√≥n salga de s√≠ misma.*/
/*Usando recursividad y devolviendo un valor*/
/*La recursividad se usa muchas veces para solucionar algoritmos. Por ejemplo, vamos a crear una funci√≥n que calcule el factorial de un n√∫mero.

El factorial de un n√∫mero es el 
resultado de multiplicar ese n√∫mero 
por todos los anteriores hasta llegar a 1.
Por ejemplo, el factorial de 5 es 5 * 4 * 3 * 2 * 1 = 120*/
function factorial(n) {
  // Condici√≥n base: Si el n√∫mero es 0 o 1, devolvemos 1
  // y no llamamos a la funci√≥n de nuevo
  if (n === 0 || n === 1) {
    return 1
  } else {
    // Si el n√∫mero es mayor que 1, llamamos a la funci√≥n
    return n * factorial(n - 1)
  }
}

console.log(factorial(5)) // Resultado: 120
console.log(factorial(3)) // Resultado: 6
_________
factorial(3) --------------------------> 6
        \ 
  3 * factorial(2) ---------------> 6
          \
    2 * factorial(1) -----------> 2
            \
      1 * factorial(0) -------> 1

/*Arrays
Los arrays (o arreglos) son estructuras de datos
que permiten almacenar m√∫ltiples valores en una sola variable.
Son muy √∫tiles cuando necesitas manejar listas de elementos
de manera organizada y eficiente.

Hasta ahora hemos visto
algunos tipos de datos. Cadenas de texto,
n√∫meros, booleanos... Pero... ¬øQu√© pasa si queremos
tener una colecci√≥n de ellos? En JavaScript tenemos los arrays.

¬øPara qu√© sirven los arrays?
‚úÖ Almacenar m√∫ltiples valores en una sola variable.
‚úÖ Acceder a los elementos f√°cilmente usando √≠ndices.
‚úÖ Recorrer la lista con bucles para procesar los datos.
‚úÖ Organizar y manipular datos mediante m√©todos como agregar,
eliminar o modificar elementos.*/


/*Declaraci√≥n y asignaci√≥n de arrays
Para declarar un array usamos los corchetes [] y dentro
los elementos de la colecci√≥n separados por comas ,.

Por ejemplo, para crear una colecci√≥n de n√∫meros del 1 al 5:*/
[1, 2, 3, 4, 5]

/*Los elementos de un array pueden ser de cualquier tipo,
incluso otros arrays.*/
[1, 2, 3, 4, [5, 6, 7, 8, 9]]

/*Y, aunque no siempre sea recomendable,
puedes mezclar tipos de datos dentro:*/
['uno', 2, true, null, undefined]

/*Para asignar un array a una variable,
lo hacemos igual que con los otros tipos de datos:*/
const numbers = [1, 2, 3, 4, 5]
let names = ['Dani', 'Miguel', 'Maria']

/*Acceso a los elementos de un array*/
/*Para acceder a los elementos de un array usamos
los corchetes [] y dentro el √≠ndice del elemento que queremos acceder.
Los √≠ndices empiezan en 0.

El √≠ndice es la posici√≥n del elemento dentro del array.
El primer elemento tiene √≠ndice 0, el segundo √≠ndice 1,
el tercero √≠ndice 2...*/
const numbers = [1, 2, 3, 4, 5]

console.log(numbers[0]) // 1
console.log(numbers[2]) // 3

/*Si intentamos acceder a un elemento que no existe nos devuelve undefined*/
const numbers = [1, 2, 3, 4, 5]

console.log(numbers[10]) // undefined
/*Puedes usar variables para acceder a los elementos de un array.*/
const numbers = [1, 2, 3, 4, 5]
let index = 2

console.log(numbers[index]) // 3
/*Modificar elementos de un array
Igual que podemos acceder a los elementos de un array,
podemos modificarlos.*/
const numbers = [1, 2, 3, 4, 5]

numbers[0] = 10
numbers[2] = 30

console.log(numbers) // [10, 2, 30, 4, 5]

/*WOW ¬øC√≥mo es que pese a que hemos indicado que 
es una constante const podemos modificar el Array?
Aunque hay una explicaci√≥n mucho m√°s larga, que veremos m√°s adelante,
la respuesta corta es que const s√≥lo impide que se reasigne el valor
de la variable, no que se modifique el valor en s√≠.*/

/*METODOS y propiedades de Array:
Los metodos nos ayudan a trabajar de manera mas eficiente o permiten gestionar, 
transformar y manipular datos de manera eficiente.

üöÄ Ventajas de Usar M√©todos en Arrays
‚úÖ Hacen el c√≥digo m√°s corto y legible
En lugar de usar un for, puedes usar forEach(), map(), filter(), etc., 
lo que hace que el c√≥digo sea m√°s claro y f√°cil de mantener.

‚úÖ Mejoran la eficiencia
Algunos m√©todos como filter() y map() crean nuevos
arrays sin modificar el original, lo que evita errores inesperados.

‚úÖ Evitan escribir c√≥digo manualmente
M√©todos como sort(), reverse(), concat(), etc.,
facilitan la manipulaci√≥n de datos sin necesidad 
de escribir funciones desde cero.*/

/*La longitud de un array
Puedes conocer la longitud de una colecci√≥n de elementos
usando la propiedad .length:*/

const frutas = ["manzana", "pera", "pl√°tano", "fresa"]
console.log(frutas.length) // 4
/*Tambi√©n puedes cortar su longitud asignando un nuevo
valor a la propiedad .length:*/

const frutas = ["manzana", "pera", "pl√°tano", "fresa"]
frutas.length = 2

console.log(frutas) // ["manzana", "pera"]
console.log(frutas.length) // 2
/*M√©todos de arrays
Cuando trabajamos con colecciones de elementos,
vamos a querer hacer cosas con ellos. Por ejemplo:
a√±adir un elemento, eliminarlo, buscarlo, etc.
Para ello, los arrays tienen una serie de m√©todos
que nos permiten hacer estas operaciones:

.push()

El m√©todo .push() nos permite a√±adir un elemento al final de un array:*/

const frutas = ["pl√°tano", "fresa"]
frutas.push("naranja")
console.log(frutas) // ["pl√°tano", "fresa", "naranja"]
/*Adem√°s, el m√©todo .push() devuelve la nueva longitud del array:*/

const frutas = ["pl√°tano", "fresa"]
console.log(frutas.length) // 2

const newLength = frutas.push("naranja")
console.log(newLength) // 3
console.log(frutas) // ["pl√°tano", "fresa", "naranja"]
.pop()
/*El m√©todo .pop() elimina y devuelve el √∫ltimo elemento de un array:*/

const frutas = ["pl√°tano", "fresa", "naranja"]
const ultimaFruta = frutas.pop()

console.log(frutas) // ["pl√°tano", "fresa"]
console.log(ultimaFruta) // "naranja"
.shift()
/*El m√©todo .shift() elimina y devuelve el primer elemento de un array.
Es lo mismo que .pop(), pero con el primer elemento en lugar del √∫ltimo:*/

const frutas = ["pl√°tano", "fresa", "naranja"]
const primeraFruta = frutas.shift()

console.log(frutas) // ["fresa", "naranja"]
console.log(primeraFruta) // "pl√°tano"
.unshift()
/*El m√©todo .unshift() a√±ade un elemento al principio de un array. 
Es lo mismo que .push(), pero con el primer elemento en lugar del √∫ltimo:*/

const frutas = ["pl√°tano", "fresa", "naranja"]
frutas.unshift("manzana")

console.log(frutas) // ["manzana", "pl√°tano", "fresa", "naranja"]

/*Concatenar arrays*/
/*Podemos concatenar dos arrays usando el m√©todo concat().*/

const numbers = [1, 2, 3]
const numbers2 = [4, 5]

const allNumbers = numbers.concat(numbers2)

console.log(allNumbers) // [1, 2, 3, 4, 5]

/*Otra forma de concatenar arrays es usando el operador ... (spread operator).
Este operador propaga los elementos de un array. As√≠ que podr√≠amos hacer
lo siguiente:*/

const numbers = [1, 2, 3]
const numbers2 = [4, 5]

//                    1, 2, 3        4, 5                     
const allNumbers = [...numbers, ...numbers2]

console.log(allNumbers) // [1, 2, 3, 4, 5]

/*Iteraci√≥n de Arrays en JavaScript
Ya hemos visto en clases anteriores c√≥mo}
podemos crear bucles con for y while. Con 
estas estructuras de control, y una nueva que
veremos en este clase, podemos tambi√©n recorrer
cada uno de los elementos de un array.

Adem√°s, veremos como los propios arrays 
tienen un m√©todo .forEach que nos permite ejecutar
una funci√≥n para cada uno de los elementos del array.

Bucle while
El bucle while vimos que permit√≠a ejecutar 
un bloque de c√≥digo mientras una condici√≥n
era verdadera. En el caso de la iteraci√≥n
de arrays, la condici√≥n generalmente se basa en el √≠ndice del elemento.

Podemos, por ejemplo, crear una variable
con let para guardar un puntero al √≠ndice 
del elemento que estamos iterando. En cada
iteraci√≥n, podemos incrementar el valor de la
variable en 1, para que en la siguiente iteraci√≥n
se imprima el siguiente elemento.*/

let frutas = ['üçé', 'üçå', 'üçì']
let i = 0 // lo usaremos como √≠ndice

while (i < frutas.length) {
  console.log(frutas[i]) // imprime el elemento en la posici√≥n i
  i++ // incrementamos el √≠ndice en 1 para la siguiente iteraci√≥n
}

Ô∏è/*Arreglos en JavaScript
Concepto
Un arreglo (array) es una estructura de datos que permite almacenar varios valores en una sola variable.
En JavaScript, los arreglos pueden contener diferentes tipos de datos (n√∫meros, strings, objetos, etc.).*/

/*Ejemplo
js
*/
// Declaraci√≥n de un arreglo
let frutas = ["üçé", "üçå", "üçì", "üçç"];

// Acceder a elementos del array
console.log(frutas[0]); // üçé

// Recorrer el array con forEach
frutas.forEach((fruta, index) => {
  console.log(`√çndice: ${index}, Fruta: ${fruta}`);
});

// Agregar elementos con push
frutas.push("üçá"); 
console.log(frutas); // ["üçé", "üçå", "üçì", "üçç", "üçá"]

// Eliminar el √∫ltimo elemento con pop
frutas.pop();
console.log(frutas); // ["üçé", "üçå", "üçì", "üçç"]

// Filtrar elementos (Ej: frutas que no sean üçå)
let sinBanana = frutas.filter(fruta => fruta !== "üçå");
console.log(sinBanana); // ["üçé", "üçì", "üçç"]
Ô∏è
 /*Programaci√≥n Orientada a Objetos (POO)
Concepto
La Programaci√≥n Orientada a Objetos (POO) se basa en el uso de clases y objetos.
 Una clase es una plantilla para crear objetos con caracter√≠sticas (propiedades) y comportamientos (m√©todos).*/

/*Ejemplo
js*/

// Definici√≥n de una clase
class Persona {
  constructor(nombre, edad) {
    this.nombre = nombre;
    this.edad = edad;
  }

  // M√©todo para mostrar informaci√≥n
  saludar() {
    console.log(`Hola, soy ${this.nombre} y tengo ${this.edad} a√±os.`);
  }
}

// Crear objetos de la clase
let persona1 = new Persona("Juan", 25);
let persona2 = new Persona("Ana", 30);

persona1.saludar(); // Hola, soy Juan y tengo 25 a√±os.
persona2.saludar(); // Hola, soy Ana y tengo 30 a√±os.
Ô∏è/*Manejo de Eventos y el DOM
Concepto
El DOM (Document Object Model) representa la estructura de una p√°gina web en forma de √°rbol.
Podemos modificarlo con JavaScript y manejar eventos como clics o movimientos del mouse.

Ejemplo
html

<!DOCTYPE html>
<html lang="es">
<head>
  <title>Eventos y DOM</title>
</head>
<body>
  <button id="miBoton">Haz clic</button>
  <p id="mensaje"></p>

  <script>
    // Seleccionar elementos del DOM
    let boton = document.getElementById("miBoton");
    let mensaje = document.getElementById("mensaje");

    // Agregar un evento de clic al bot√≥n
    boton.addEventListener("click", () => {
      mensaje.textContent = "¬°Bot√≥n clickeado!";
    });
  </script>
</body>
</html>
Se selecciona el bot√≥n y el p√°rrafo con getElementById.
Se agrega un evento de clic que cambia el texto del p√°rrafo.*/
 /*M√≥dulos en JavaScript
Concepto
Los m√≥dulos permiten dividir el c√≥digo en archivos reutilizables.
Se exportan con export y se importan con import.

Ejemplo
üìÅ archivo: saludo.js (M√≥dulo)
js

export function saludar(nombre) {
  return `Hola, ${nombre}!`;
}
üìÅ archivo: main.js (Importaci√≥n del m√≥dulo)
js

import { saludar } from "./saludo.js";

console.log(saludar("Juan")); // Hola, Juan!
üí° Nota: Para usar m√≥dulos, el archivo HTML debe incluir type="module":

html

<script type="module" src="main.js"></script> */


/*Programaci√≥n As√≠ncrona
Concepto
La programaci√≥n as√≠ncrona permite ejecutar tareas sin bloquear 
el flujo principal del c√≥digo. Se usan callbacks, promesas (Promise) y async/await.

Ejemplo con setTimeout (Callback)
js

console.log("Inicio");

// Tarea as√≠ncrona despu√©s de 2 segundos
setTimeout(() => {
  console.log("Esto aparece despu√©s de 2 segundos");
}, 2000);

console.log("Fin");
Salida:

nginx

Inicio
Fin
Esto aparece despu√©s de 2 segundos
Ejemplo con Promesas (Promise)
js

function descargarArchivo() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      let exito = true; // Cambia a false para probar el error
      if (exito) {
        resolve("Archivo descargado ‚úÖ");
      } else {
        reject("Error en la descarga ‚ùå");
      }
    }, 3000);
  });
}

// Uso de la promesa
descargarArchivo()
  .then(mensaje => console.log(mensaje))
  .catch(error => console.error(error));
Ejemplo con async/await
js

async function proceso() {
  console.log("Iniciando...");

  try {
    let resultado = await descargarArchivo();
    console.log(resultado);
  } catch (error) {
    console.error(error);
  }

  console.log("Proceso terminado.");
}

proceso();
Salida esperada:

scss

Iniciando...
(Despu√©s de 3 segundos)
Archivo descargado ‚úÖ
Proceso terminado.*/


